apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-manifest
spec:
  description: This task updates the manifest for the current application to point
    to the image tag created with the short commit.
  params:
  - description: Used to tag the built image.
    name: image
    type: string
  - default: main
    description: Target branch to push to
    name: target-branch
    type: string
  - default: Tekton Pipeline
    description: Git user name for performing the push operation.
    name: git_user_name
    type: string
  - default: tekton@tekton.com
    description: Git user email for performing the push operation.
    name: git_user_email
    type: string
  - description: File in which the image configuration is stored.
    name: configuration_file
    type: string
  - description: Repo in which the image configuration is stored.
    name: repository
    type: string
  steps:
  - image: registry.k8s.io/kustomize/kustomize:v5.0.0
    env:
    - name: GITHOSTACCESSTOKEN
      valueFrom:
        secretKeyRef:
          key: token
          name: git-token
    name: git
    script: |
      # Setting up the git config.
      git config --global user.email "$(params.git_user_email)"
      git config --global user.name "$(params.git_user_name)"
      git config --global init.defaultBranch main

      # Checkout target branch to avoid the detached HEAD state
      TMPDIR=$(mktemp -d)

      cd $TMPDIR
      git init
      git fetch
      git remote update
      echo $(params.repository)
      git clone https://${GITHOSTACCESSTOKEN}@github.com/BaxxiJ/rhsc23-pipeline.git
      #TODO change cloned repo to demo-setup

      echo ${GITHOSTACCESSTOKEN}
      ls -la
      cd rhsc23-pipeline/gitops/application/globex/overlays/dev
      git checkout $(params.target-branch)

      # Set to the short commit value passed as parameter.
      # Notice the enclosing " to keep it as a string in the resulting YAML.
      IMAGE=\"$(params.image)\"

      # sed -i "s#\(.*value:\s*\).*#\1 ${IMAGE}#" $(params.configuration_file)

      echo "$(params.image)"

      kustomize edit set image $(params.image)

      cat kustomization.yaml

      kustomize build .
      ##TODO replace with "kustomize edit set image example/hello:1=example/hello:latest"

      git add $(params.configuration_file)
      git commit -m "Automatically updated manifest to point to image tag $IMAGE"
      git push origin main

      # flow of code: login to git > make new git branch > clone repo > set IMAGE var > replace image with new image tag > git commit & push
      # TODO, fix git login, replace git repo w/ demo-cluster-setup, replace sed with kustomize